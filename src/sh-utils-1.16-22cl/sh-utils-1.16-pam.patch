--- sh-utils-1.16/doc/sh-utils.texi.nopam	Sat Nov 30 09:18:07 1996
+++ sh-utils-1.16/doc/sh-utils.texi	Tue Mar 25 16:11:31 1997
@@ -2855,33 +2855,6 @@
 
 @end table
 
-@cindex wheel group, not supported
-@cindex group wheel, not supported
-@cindex fascism
-@heading Why GNU @code{su} does not support the @samp{wheel} group
-
-(This section is by Richard Stallman.)
-
-@cindex Twenex
-@cindex MIT AI lab
-Sometimes a few of the users try to hold total power over all the
-rest.  For example, in 1984, a few users at the MIT AI lab decided to
-seize power by changing the operator password on the Twenex system and
-keeping it secret from everyone else.  (I was able to thwart this coup
-and give power back to the users by patching the kernel, but I
-wouldn't know how to do that in Unix.)
-
-However, occasionally the rulers do tell someone.  Under the usual
-@code{su} mechanism, once someone learns the root password who
-sympathizes with the ordinary users, he or she can tell the rest.  The
-``wheel group'' feature would make this impossible, and thus cement the
-power of the rulers.
-
-I'm on the side of the masses, not that of the rulers.  If you are
-used to supporting the bosses and sysadmins in whatever they do, you
-might find this idea strange at first.
-
-
 @node Delaying
 @chapter Delaying
 
--- sh-utils-1.16/man/su.1.nopam	Thu Jul 11 22:46:40 1996
+++ sh-utils-1.16/man/su.1	Tue Mar 25 16:11:30 1997
@@ -42,11 +42,6 @@
 can be compiled to report failed, and optionally successful,
 .B su
 attempts using syslog.
-.PP
-This program does not support a "wheel group" that restricts who can
-.B su
-to super-user accounts, because that can help fascist system
-administrators hold unwarranted power over other users.
 .SS OPTIONS
 .TP
 .I "\-c COMMAND, \-\-command=COMMAND"
@@ -101,19 +96,3 @@
 .TP
 .I "\-\-version"
 Print version information on standard output then exit successfully.
-.SH Why GNU su does not support the wheel group (by Richard Stallman)
-Sometimes a few of the users try to hold total power over all the
-rest.  For example, in 1984, a few users at the MIT AI lab decided to
-seize power by changing the operator password on the Twenex system and
-keeping it secret from everyone else.  (I was able to thwart this coup
-and give power back to the users by patching the kernel, but I
-wouldn't know how to do that in Unix.)
-.PP
-However, occasionally the rulers do tell someone.  Under the usual su
-mechanism, once someone learns the root password who sympathizes with
-the ordinary users, he can tell the rest.  The "wheel group" feature
-would make this impossible, and thus cement the power of the rulers.
-.PP
-I'm on the side of the masses, not that of the rulers.  If you are
-used to supporting the bosses and sysadmins in whatever they do, you
-might find this idea strange at first.
--- sh-utils-1.16/src/su.c.nopam	Wed Dec 18 23:15:30 1996
+++ sh-utils-1.16/src/su.c	Tue Mar 25 16:25:37 1997
@@ -38,6 +38,16 @@
    restricts who can su to UID 0 accounts.  RMS considers that to
    be fascist.
 
+#ifdef USE_PAM
+
+   Actually, with PAM, su has nothing to do with whether or not a
+   wheel group is enforced by su.  RMS tries to restrict your access
+   to a su which implements the wheel group, but PAM considers that
+   to be fascist, and gives the user/sysadmin the opportunity to
+   enforce a wheel group by proper editing of /etc/pam.conf
+
+#endif
+
    Options:
    -, -l, --login	Make the subshell a login shell.
 			Unset all environment variables except
@@ -75,6 +85,11 @@
 #include <sys/types.h>
 #include <pwd.h>
 #include <grp.h>
+#ifdef USE_PAM
+#include <security/pam_appl.h>
+#include <signal.h>
+#include <sys/wait.h>
+#endif
 #include "system.h"
 
 #if defined(HAVE_SYSLOG_H) && defined(HAVE_SYSLOG)
@@ -138,7 +153,9 @@
 /* The user to become if none is specified.  */
 #define DEFAULT_USER "root"
 
+#ifndef USE_PAM
 char *crypt ();
+#endif
 char *getpass ();
 char *getusershell ();
 void endusershell ();
@@ -262,7 +279,157 @@
 }
 #endif
 
+#ifdef USE_PAM
+/* conversation function and static variables for communication */
+
+/*
+ * A generic conversation function for text based applications
+ *
+ * Written by Andrew Morgan <morgan@physics.ucla.edu>
+ *
+ */
+
+#include <stdlib.h>
+#include <unistd.h>
+
+#define INPUTSIZE PAM_MAX_MSG_SIZE
+
+#define CONV_ECHO_ON  1
+#define CONV_ECHO_OFF 0
+
+#define _pam_overwrite(x) \
+{ \
+     register char *xx; \
+     if ((xx=x)) \
+          while (*xx) \
+               *xx++ = '\0'; \
+}
+
+static char *read_string(int echo, const char *remark)
+{
+     char buffer[INPUTSIZE];
+     char *text,*tmp;
+
+     if (!echo) {
+	  tmp = getpass(remark);
+	  text = strdup(tmp);       /* get some space for this text */
+	  _pam_overwrite(tmp);       /* overwrite the old record of
+				      * the password */
+     } else {
+	  fprintf(stderr,"%s",remark);
+	  text = fgets(buffer,INPUTSIZE-1,stdin);
+	  if (text) {
+	       tmp = buffer + strlen(buffer);
+	       while (tmp > buffer && (*--tmp == '\n'))
+		    *tmp = '\0';
+	       text = strdup(buffer);  /* get some space for this text */
+	  }
+     }
+
+     return (text);
+}
+
+#define REPLY_CHUNK 5
+
+static void drop_reply(struct pam_response *reply, int replies)
+{
+     int i;
+
+     for (i=0; i<replies; ++i) {
+	  _pam_overwrite(reply[i].resp);      /* might be a password */
+	  free(reply[i].resp);
+     }
+     if (reply)
+	  free(reply);
+}
+
+int misc_conv(int num_msg, const struct pam_message **msgm,
+		     struct pam_response **response, void *appdata_ptr)
+{
+     int count=0,replies=0,space=0;
+     struct pam_response *reply=NULL;
+     char *string=NULL;
+
+     for (count=0; count < num_msg; ++count) {
+	  switch (msgm[count]->msg_style) {
+	  case PAM_PROMPT_ECHO_OFF:
+	       string = read_string(CONV_ECHO_OFF,msgm[count]->msg);
+	       if (string == NULL) {
+		    drop_reply(reply,replies);
+		    return (PAM_CONV_ERR);
+	       }
+	       break;
+	  case PAM_PROMPT_ECHO_ON:
+	       string = read_string(CONV_ECHO_ON,msgm[count]->msg);
+	       if (string == NULL) {
+		    drop_reply(reply,replies);
+		    return (PAM_CONV_ERR);
+	       }
+	       break;
+	  case PAM_ERROR_MSG:
+	       fprintf(stderr,"%s\n",msgm[count]->msg);
+	       break;
+	  case PAM_TEXT_INFO:
+	       fprintf(stderr,"%s\n",msgm[count]->msg);
+	       break;
+	  default:
+	       fprintf(stderr, "erroneous conversation (%d)\n"
+		       ,msgm[count]->msg_style);
+	       drop_reply(reply,replies);
+	       return (PAM_CONV_ERR);
+	  }
+
+	  if (string) {     /* must add to reply array */
+	       struct pam_response *ptmp;
+
+	       /* do we need a larger reply array ? */
+
+	       if (space <= replies) {
+		    space += REPLY_CHUNK;
+		    ptmp = (struct pam_response *)
+			 realloc(reply, space*sizeof(struct pam_response));
+		    if (ptmp == NULL) {
+			 drop_reply(reply,replies);
+			 return PAM_CONV_ERR;        /* ran out of memory */
+		    }
+		    reply = ptmp;                       /* enlarged array */
+	       }
+
+	       /* add string to list of responses */
+
+	       reply[replies].resp_retcode = 0;
+	       reply[replies++].resp = string;
+	       string = NULL;
+	  }
+     }
+
+     /* do we need to bother with a response? */
+     if (reply) {
+
+	  /* note, this pam_response structure (array) will be
+	   * free()'d by the module */
+
+	  *response = reply;
+     }
+     
+     return PAM_SUCCESS;
+}
+
+static pam_handle_t *pamh = NULL;
+static int retval;
+static struct pam_conv conv = {
+  misc_conv,
+  NULL
+};
+
+#define PAM_BAIL_P if (retval) { \
+  pam_end(pamh, PAM_SUCCESS); \
+  return 0; \
+}
+#endif
+
 /* Ask the user for a password.
+   If PAM is in use, let PAM ask for the password if necessary.
    Return 1 if the user gives the correct password for entry PW,
    0 if not.  Return 1 without asking for a password if run by UID 0
    or if PW has an empty password.  */
@@ -270,6 +437,28 @@
 static int
 correct_password (const struct passwd *pw)
 {
+#ifdef USE_PAM
+
+  /* root always succeeds; this isn't an authentication question (no
+   * extra privs are being granted) so it shouldn't authenticate with PAM.
+   * However, we want to create the pam_handle so that proper credentials
+   * are created later with pam_setcred(). */
+  retval = pam_start("su", pw->pw_name, &conv, &pamh);
+  PAM_BAIL_P;
+  if (getuid () == 0)
+    return 1;
+  retval = pam_authenticate(pamh, 0);
+  PAM_BAIL_P;
+  retval = pam_acct_mgmt(pamh, 0);
+  if (retval == PAM_AUTHTOKEN_REQD) {
+    /* password has expired.  Offer option to change it. */
+    retval = pam_chauthtok(pamh, PAM_CHANGE_EXPIRED_AUTHTOK);
+    PAM_BAIL_P;
+  }
+  PAM_BAIL_P;
+  /* must be authenticated if this point was reached */
+  return 1;
+#else /* !USE_PAM */
   char *unencrypted, *encrypted, *correct;
 #ifdef HAVE_SHADOW_H
   /* Shadow passwd stuff for SVR3 and maybe other systems.  */
@@ -294,6 +483,7 @@
   encrypted = crypt (unencrypted, correct);
   memset (unencrypted, 0, strlen (unencrypted));
   return strcmp (encrypted, correct) == 0;
+#endif /* !USE_PAM */
 }
 
 /* Update `environ' for the new shell based on PW, with SHELL being
@@ -348,12 +538,26 @@
     error (1, errno, _("cannot set groups"));
   endgrent ();
 #endif
+#ifdef USE_PAM
+  retval = pam_setcred(pamh, PAM_CRED_ESTABLISH);
+  if (retval != PAM_SUCCESS)
+    error (1, 0, pam_strerror(retval));
+#endif /* USE_PAM */
   if (setgid (pw->pw_gid))
     error (1, errno, _("cannot set group id"));
   if (setuid (pw->pw_uid))
     error (1, errno, _("cannot set user id"));
 }
 
+#ifdef USE_PAM
+static int caught=0;
+/* Signal handler for parent process later */
+static void su_catch_sig(int sig)
+{
+  ++caught;
+}
+#endif
+
 /* Run SHELL, or DEFAULT_SHELL if SHELL is empty.
    If COMMAND is nonzero, pass it to the shell with the -c option.
    If ADDITIONAL_ARGS is nonzero, pass it to the shell as more
@@ -364,7 +568,20 @@
 {
   const char **args;
   int argno = 1;
-
+#ifdef USE_PAM
+  int child;
+  sigset_t ourset;
+  int status;
+
+  retval = pam_open_session(pamh,0);
+  if (retval != PAM_SUCCESS) {
+    fprintf (stderr, "could not open session\n");
+    exit (1);
+  }
+  child = fork();
+  if (child == 0) {  /* child shell */
+  pam_end(pamh, 0);
+#endif
   if (additional_args)
     args = (const char **) xmalloc (sizeof (char *)
 				    * (10 + elements (additional_args)));
@@ -396,6 +613,58 @@
   args[argno] = NULL;
   execv (shell, (char **) args);
   error (1, errno, _("cannot run %s"), shell);
+#ifdef USE_PAM
+  }
+  /* parent only */
+  sigfillset(&ourset);
+  if (sigprocmask(SIG_BLOCK, &ourset, NULL)) {
+    fprintf(stderr, "su: signal malfunction\n");
+    caught = 1;
+  }
+  if (!caught) {
+    struct sigaction action;
+    action.sa_handler = su_catch_sig;
+    sigemptyset(&action.sa_mask);
+    action.sa_flags = 0;
+    sigemptyset(&ourset);
+    if (sigaddset(&ourset, SIGTERM)
+        || sigaddset(&ourset, SIGALRM)
+        || sigaction(SIGTERM, &action, NULL)
+        || sigprocmask(SIG_UNBLOCK, &ourset, NULL)) {
+      fprintf(stderr, "su: signal masking malfunction\n");
+      caught = 1;
+    }
+  }
+  if (!caught) {
+    do {
+      int pid;
+
+      pid = waitpid(-1, &status, WUNTRACED);
+
+      if (WIFSTOPPED(status)) {
+          kill(getpid(), SIGSTOP);
+          /* once we get here, we must have resumed */
+          kill(pid, SIGCONT);
+      }
+    } while (WIFSTOPPED(status));
+  } else
+    status = -1;
+
+  if (caught) {
+    fprintf(stderr, "\nSession terminated, killing shell...");
+    kill (child, SIGTERM);
+  }
+  retval = pam_close_session(pamh, 0);
+  PAM_BAIL_P;
+  retval = pam_end(pamh, PAM_SUCCESS);
+  PAM_BAIL_P;
+  if (caught) {
+    sleep(2);
+    kill(child, SIGKILL);
+    fprintf(stderr, " ...killed.\n");
+  }
+  exit (status);
+#endif /* USE_PAM */
 }
 
 /* Return 1 if SHELL is a restricted shell (one not returned by
--- sh-utils-1.16/src/Makefile.in.nopam	Tue Mar 25 16:11:30 1997
+++ sh-utils-1.16/src/Makefile.in	Tue Mar 25 16:18:42 1997
@@ -437,7 +437,7 @@
 $(su_OBJECTS): ../config.h
 
 su: $(su_OBJECTS) $(su_DEPENDENCIES)
-	$(LINK) $(su_LDFLAGS) $(su_OBJECTS) $(su_LDADD) $(LIBS)
+	$(LINK) $(su_LDFLAGS) $(su_OBJECTS) $(su_LDADD) $(LIBS) $(PAMLIBS)
 $(tee_OBJECTS): ../config.h
 
 tee: $(tee_OBJECTS) $(tee_DEPENDENCIES)
--- sh-utils-1.16/Makefile.in.nopam	Sun Jan 26 22:20:04 1997
+++ sh-utils-1.16/Makefile.in	Tue Mar 25 16:17:21 1997
@@ -122,12 +122,12 @@
 	@for subdir in $(SUBDIRS); do \
 	  target=`echo $@ | sed s/-recursive//`; \
 	  echo "Making $$target in $$subdir"; \
-	  (cd $$subdir && $(MAKE) $$target) \
+	  (cd $$subdir && $(MAKE) $$target PAMLIBS="$(PAMLIBS)") \
 	   || case "$(MFLAGS)" in *k*) fail=yes;; *) exit 1;; esac; \
 	done && test -z "$$fail"
 tags-recursive:
 	list="$(SUBDIRS)"; for subdir in $$list; do \
-	  (cd $$subdir && $(MAKE) tags); \
+	  (cd $$subdir && $(MAKE) tags PAMLIBS="$(PAMLIBS)"); \
 	done
 tags: TAGS
 TAGS:
