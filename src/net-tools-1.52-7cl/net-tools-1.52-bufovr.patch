From gafton@redhat.com  Tue Jun 15 11:26:43 1999

>> 2. Very dangerous (I think): INET_resolve() trusts DNS responses
>> 3. Very dangerous (I think): INET_rresolve() trusts DNS responses

Try the patch below.  I removed the code in INET_resolve that returns the 
canonical hostname since as far as I know nothing depends on it.  
INET_rresolve now takes a `length' argument.

I don't have time today to check the code in detail so I can't promise that 
this fixes the bug.  Let me know if there is still a problem.

p.

Index: iptunnel.c
===================================================================
RCS file: /vger/u4/cvs/net-tools/iptunnel.c,v
retrieving revision 1.7
diff -u -p -r1.7 iptunnel.c
--- net-tools/iptunnel.c	1999/04/23 08:32:39	1.7
+++ net-tools/iptunnel.c	1999/06/12 15:01:05
@@ -279,7 +279,7 @@ static int parse_args(int argc, char **a
 				p->iph.saddr = get_addr32(*argv);
 		} else if (strcmp(*argv, "dev") == 0) {
 			NEXT_ARG();
-			strncpy(medium, *argv, IFNAMSIZ-1);
+			safe_strncpy(medium, *argv, IFNAMSIZ-1);
 		} else if (strcmp(*argv, "ttl") == 0) {
 			unsigned uval;
 			NEXT_ARG();
@@ -304,7 +304,7 @@ static int parse_args(int argc, char **a
 		} else {
 			if (p->name[0])
 				usage();
-			strncpy(p->name, *argv, IFNAMSIZ);
+			safe_strncpy(p->name, *argv, IFNAMSIZ);
 		}
 		argc--; argv++;
 	}
Index: slattach.c
===================================================================
RCS file: /vger/u4/cvs/net-tools/slattach.c,v
retrieving revision 1.4
diff -u -p -r1.4 slattach.c
--- net-tools/slattach.c	1999/04/18 19:41:19	1.4
+++ net-tools/slattach.c	1999/06/12 15:01:16
@@ -660,7 +660,7 @@ main(int argc, char *argv[])
 
   /* Is a terminal given? */
   if (optind != (argc - 1)) usage();
-  strncpy(path, argv[optind], 128);
+  safe_strncpy(path, argv[optind], sizeof(path));
   if (!strcmp(path, "-")) {
 	opt_e = 1;
 	sp = NULL;
Index: lib/inet.c
===================================================================
RCS file: /vger/u4/cvs/net-tools/lib/inet.c,v
retrieving revision 1.11
diff -u -p -r1.11 inet.c
--- net-tools/lib/inet.c	1999/03/03 21:43:08	1.11
+++ net-tools/lib/inet.c	1999/06/12 15:01:22
@@ -91,7 +91,6 @@ static int INET_resolve(char *name, stru
     /* Try the NETWORKS database to see if this is a known network. */
     if ((np = getnetbyname(name)) != (struct netent *) NULL) {
 	sin->sin_addr.s_addr = htonl(np->n_net);
-	strcpy(name, np->n_name);
 	return 1;
     }
 #ifdef DEBUG
@@ -103,14 +102,15 @@ static int INET_resolve(char *name, stru
 	errno = h_errno;
 	return -1;
     }
-    memcpy((char *) &sin->sin_addr, (char *) hp->h_addr_list[0], hp->h_length);
-    strcpy(name, hp->h_name);
+    memcpy((char *) &sin->sin_addr, (char *) hp->h_addr_list[0], 
+	   sizeof(struct in_addr));
+
     return 0;
 }
 
 
-static int INET_rresolve(char *name, struct sockaddr_in *sin, int numeric,
-			 unsigned int netmask)
+static int INET_rresolve(char *name, size_t len, struct sockaddr_in *sin, 
+			 int numeric, unsigned int netmask)
 {
     struct hostent *ent;
     struct netent *np;
@@ -129,14 +129,14 @@ static int INET_rresolve(char *name, str
     if (ad == INADDR_ANY) {
 	if ((numeric & 0x7FFF) == 0) {
 	    if (numeric & 0x8000)
-		strcpy(name, "default");
+		safe_strncpy(name, "default", len);
 	    else
-		strcpy(name, "*");
+	        safe_strncpy(name, "*", len);
 	    return (0);
 	}
     }
     if (numeric & 0x7FFF) {
-	strcpy(name, inet_ntoa(sin->sin_addr));
+        safe_strncpy(name, inet_ntoa(sin->sin_addr), len);
 	return (0);
     }
 #if 0
@@ -145,7 +145,7 @@ static int INET_rresolve(char *name, str
     pn = INET_nn;
     while (pn != NULL) {
 	if (pn->addr.sin_addr.s_addr == ad) {
-	    strcpy(name, pn->name);
+	    safe_strncpy(name, pn->name, len);
 	    return (0);
 	}
 	pn = pn->next;
@@ -157,16 +157,14 @@ static int INET_rresolve(char *name, str
     if ((ad & (~ netmask)) != 0) {
 	ent = gethostbyaddr((char *) &ad, 4, AF_INET);
 	if (ent != NULL)
-	    strcpy(name, ent->h_name);
+	    safe_strncpy(name, ent->h_name, len);
     } else {
 	np = getnetbyaddr(host_ad, AF_INET);
-	if (np != NULL) {
-	    strcpy(name, np->n_name);
-	}
-    }
-    if ((ent == NULL) && (np == NULL)) {
-	strcpy(name, inet_ntoa(sin->sin_addr));
+	if (np != NULL)
+	    safe_strncpy(name, np->n_name, len);
     }
+    if ((ent == NULL) && (np == NULL))
+	safe_strncpy(name, inet_ntoa(sin->sin_addr), len);
     pn = (struct addr *) malloc(sizeof(struct addr));
     pn->addr = *sin;
     pn->next = INET_nn;
@@ -198,9 +196,11 @@ static char *INET_sprint(struct sockaddr
 
     if (sap->sa_family == 0xFFFF || sap->sa_family == 0)
 	return safe_strncpy(buff, _("[NONE SET]"), sizeof(buff));
-    if (INET_rresolve(buff, (struct sockaddr_in *) sap, numeric, 
-		      0xffffff00) != 0)
+
+    if (INET_rresolve(buff, sizeof(buff), (struct sockaddr_in *) sap, 
+		      numeric, 0xffffff00) != 0)
 	return (NULL);
+
     return (buff);
 }
 
@@ -211,8 +211,8 @@ char *INET_sprintmask(struct sockaddr *s
 
     if (sap->sa_family == 0xFFFF || sap->sa_family == 0)
 	return safe_strncpy(buff, _("[NONE SET]"), sizeof(buff));
-    if (INET_rresolve(buff, (struct sockaddr_in *) sap, numeric,
-		      netmask) != 0)
+    if (INET_rresolve(buff, sizeof(buff), (struct sockaddr_in *) sap, 
+		      numeric, netmask) != 0)
 	return (NULL);
     return (buff);
 }



