--- XFree86-3.3.3.1/xc/lib/xtrans/Xtransint.h.tmpdir	Sun Sep 13 09:11:37 1998
+++ XFree86-3.3.3.1/xc/lib/xtrans/Xtransint.h	Mon Mar 29 20:37:01 1999
@@ -455,6 +455,12 @@
 #endif
 );
 
+static int trans_mkdir (
+#if NeedFunctionPrototypes
+    char *,		/* path */
+    int			/* mode */
+#endif
+);
 
 /*
  * Some XTRANSDEBUG stuff
--- XFree86-3.3.3.1/xc/lib/xtrans/Xtranslcl.c.tmpdir	Mon Mar 29 20:37:00 1999
+++ XFree86-3.3.3.1/xc/lib/xtrans/Xtranslcl.c	Mon Mar 29 20:37:01 1999
@@ -444,9 +444,11 @@
 #else
     mode = 0777;
 #endif
-
-    mkdir(X_STREAMS_DIR, mode);
-    chmod(X_STREAMS_DIR, mode);
+    if (trans_mkdir(X_STREAMS_DIR, mode) == -1) {
+	PRMSG (1, "PTSOpenServer: mkdir(%s) failed, errno = %d\n",
+	       X_STREAMS_DIR, errno, 0);
+	return(-1);
+    }
 
     if( (fd=open(server_path, O_RDWR)) >= 0 ) {
 #if 0
@@ -724,9 +726,11 @@
 #else
     mode = 0777;
 #endif
-
-    mkdir(X_STREAMS_DIR, mode);
-    chmod(X_STREAMS_DIR, mode);
+    if (trans_mkdir(X_STREAMS_DIR, mode) == -1) {
+	PRMSG (1, "NAMEDOpenServer: mkdir(%s) failed, errno = %d\n",
+	       X_STREAMS_DIR, errno, 0);
+	return(-1);
+    }
 
     if(stat(server_path, &sbuf) != 0) {
 	if (errno == ENOENT) {
@@ -1044,11 +1048,19 @@
     mode = 0777;
 #endif
 
-    mkdir(X_STREAMS_DIR, mode); /* "/dev/X" */
-    chmod(X_STREAMS_DIR, mode);
-    mkdir(X_ISC_DIR, mode); /* "/dev/X/ISCCONN" */
-    chmod(X_ISC_DIR, mode);
-    
+    /* "/dev/X" */
+    if (trans_mkdir(X_STREAMS_DIR, mode) == -1) {
+      PRMSG (1, "ISCOpenServer: mkdir(%s) failed, errno = %d\n",
+             X_STREAMS_DIR, errno, 0);
+      return(-1);
+    }
+    /* "/dev/X/ISCCONN" */
+    if (trans_mkdir(X_ISC_DIR, mode) == -1) {
+      PRMSG (1, "ISCOpenServer: mkdir(%s) failed, errno = %d\n",
+             X_ISC_DIR, errno, 0);
+      return(-1);
+    }
+         
     unlink(server_path);
     
     if( ((fds=open(DEV_SPX, O_RDWR)) < 0) ||
@@ -1072,8 +1084,11 @@
      */
 #define X_UNIX_DIR	"/tmp/.X11-unix"
     
-    mkdir(X_UNIX_DIR, mode);
-    chmod(X_UNIX_DIR, mode);
+    if (trans_mkdir(X_UNIX_DIR, mode) == -1) {
+      PRMSG (1, "ISCOpenServer: mkdir(%s) failed, errno = %d\n",
+             X_UNIX_DIR, errno, 0);
+      return(-1);
+    }
     
     unlink(server_unix_path);
     
--- XFree86-3.3.3.1/xc/lib/xtrans/Xtranssock.c.tmpdir	Mon Mar 29 20:37:00 1999
+++ XFree86-3.3.3.1/xc/lib/xtrans/Xtranssock.c	Mon Mar 29 20:37:01 1999
@@ -946,8 +946,11 @@
 #else
     mode = 0777;
 #endif
-    mkdir (UNIX_DIR, mode);
-    chmod (UNIX_DIR, mode);
+    if (trans_mkdir(UNIX_DIR, mode) == -1) {
+	PRMSG (1, "SocketUNIXCreateListener: mkdir(%s) failed, errno = %d\n",
+	       UNIX_DIR, errno, 0);
+	return TRANS_CREATE_LISTENER_FAILED;
+    }
 #endif
 
     sockname.sun_family = AF_UNIX;
@@ -1041,8 +1044,11 @@
 #else
 	mode = 0777;
 #endif
-	mkdir (UNIX_DIR, mode);
-	chmod (UNIX_DIR, mode);
+        if (trans_mkdir(UNIX_DIR, mode) == -1) {
+            PRMSG (1, "SocketUNIXResetListener: mkdir(%s) failed, errno = %d\n",
+	    UNIX_DIR, errno, 0);
+	    return TRANS_RESET_FAILURE;
+        }
 #endif
 
 	close (ciptr->fd);
--- XFree86-3.3.3.1/xc/lib/xtrans/Xtransutil.c.tmpdir	Mon Dec 23 01:04:18 1996
+++ XFree86-3.3.3.1/xc/lib/xtrans/Xtransutil.c	Mon Mar 29 20:37:01 1999
@@ -465,3 +465,34 @@
 
     return (1);
 }
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <errno.h>
+
+static int
+trans_mkdir(char *path, int mode)
+{
+    struct stat buf;
+
+    unlink(path);
+    if (mkdir(path, mode) == 0) {
+	/* I don't know why this is done, but  it was in the original
+	   xtrans code */
+	chmod(path, mode);
+	return 0;
+    }
+    /* If mkdir failed with EEXIST, test if it is a directory with
+       the right modes, else fail */
+    if (errno == EEXIST) {
+	if (lstat(path, &buf) != 0) {
+	    return -1;
+	}
+	if (S_ISDIR(buf.st_mode) && (buf.st_uid == 0 ) &&
+	    ((buf.st_mode & ~S_IFMT) == mode)) {
+	    return 0;
+	}
+    }
+    /* In all other cases, fail */
+    return -1;
+}
--- XFree86-3.3.3.1/xc/programs/lbxproxy/os/connection.c.tmpdir	Thu Nov  5 14:27:57 1998
+++ XFree86-3.3.3.1/xc/programs/lbxproxy/os/connection.c	Mon Mar 29 21:35:03 1999
@@ -297,6 +297,34 @@
 }
 #endif /* TCPCONN */
 
+static int
+trans_mkdir(char *path, int mode)
+{
+    struct stat buf;
+
+    unlink(path);
+    if (mkdir(path, mode) == 0) {
+	/* I don't know why this is done, but  it was in the original
+	   xtrans code */
+	chmod(path, mode);
+	return 0;
+    }
+    /* If mkdir failed with EEXIST, test if it is a directory with
+       the right modes, else fail */
+    if (errno == EEXIST) {
+	if (lstat(path, &buf) != 0) {
+	    return -1;
+	}
+	if (S_ISDIR(buf.st_mode) && (buf.st_uid == 0 ) &&
+	    ((buf.st_mode & ~S_IFMT) == mode)) {
+	    return 0;
+	}
+    }
+    /* In all other cases, fail */
+    return -1;
+}
+
+
 #if defined(UNIXCONN) && !defined(LOCALCONN)
 
 static struct sockaddr_un unsock;
@@ -318,8 +346,10 @@
 #else
     mode = 0777;
 #endif
-    mkdir (X_UNIX_DIR, mode);
-    chmod (X_UNIX_DIR, mode);
+    if (trans_mkdir(X_UNIX_DIR, mode) == -1) {
+       Error ("open_unix_socket() mkdir error");
+       return -1;
+    }
 #endif
     strcpy (unsock.sun_path, X_UNIX_PATH);
     strcat (unsock.sun_path, display);
@@ -562,10 +592,14 @@
 #else
     mode = 0777;
 #endif
-    mkdir(X_STREAMS_DIR, mode); /* "/dev/X" */
-    chmod(X_STREAMS_DIR, mode);
-    mkdir(X_UNIX_DEVDIR, mode);
-    chmod(X_UNIX_DEVDIR, mode);
+    if (trans_mkdir(X_STREAMS_DIR, mode) == -1) {
+       Error ("open_unix_local() mkdir error");
+       return -1;
+    }
+    if (trans_mkdir(X_UNIX_DEVDIR, mode) == -1) {
+       Error ("open_unix_local() mkdir error");
+       return -1;
+    }
     strcpy(unsock.sun_path, X_UNIX_DEVPATH);
     strcat(unsock.sun_path, display);
     xlocal_unlink(unsock.sun_path);
@@ -587,8 +621,10 @@
 
     if (useSlashTmpForUNIX) {
 	char tmpPath[64];
-	mkdir(X_UNIX_DIR, mode);
-	chmod(X_UNIX_DIR, mode);
+        if (trans_mkdir(X_UNIX_DIR, mode) == -1) {
+          Error ("open_unix_local() mkdir error");
+          return -1;
+        }
 	strcpy(tmpPath, X_UNIX_PATH);
 	strcat(tmpPath, display);
 	xlocal_unlink(tmpPath);
@@ -726,10 +762,14 @@
     char pathISC[64],pathX11[64];
     unsigned int mode;
 
-    mkdir(X_STREAMS_DIR, 0777); /* "/dev/X" */
-    chmod(X_STREAMS_DIR, 0777);
-    mkdir(X_ISC_DIR, 0777); /* "/dev/X/ISCCONN" */
-    chmod(X_ISC_DIR, 0777);
+   if (trans_mkdir(X_STREAMS_DIR, mode) == -1) {
+          Error ("open_isc_local() mkdir error");
+          return -1;
+    }
+   if (trans_mkdir(X_ISC_DIR, mode) == -1) {
+          Error ("open_isc_local() mkdir error");
+          return -1;
+    }
 
     strcpy(pathISC, X_ISC_PATH);
     strcat(pathISC, display);
@@ -753,8 +793,10 @@
 #else
 		mode = 0777;
 #endif
-		mkdir(X_UNIX_DIR, mode);
-		chmod(X_UNIX_DIR, mode);
+                if (trans_mkdir(X_UNIX_DIR, mode) == -1) {
+                     Error ("open_isc_local() mkdir error");
+                     return -1;
+                }
 		strcpy(pathX11, X_UNIX_PATH);
 		strcat(pathX11, display);
 		if (xlocal_unlink(pathX11) < 0) {
@@ -950,8 +992,10 @@
 #else
     mode = 0777;
 #endif
-    mkdir(X_STREAMS_DIR, mode);
-    chmod(X_STREAMS_DIR, mode);
+    if (trans_mkdir(X_STREAMS_DIR, mode) == -1) {
+        Error ("open_isc_local() mkdir error");
+        return -1;
+    }
   
     strcpy(path, X_PTS_PATH);
     strcat(path, display);
@@ -1052,8 +1096,10 @@
 #else
     mode = 0777;
 #endif
-    mkdir(X_STREAMS_DIR, mode);
-    chmod(X_STREAMS_DIR, mode);
+    if (trans_mkdir(X_STREAMS_DIR, mode) == -1) {
+        Error ("open_named_local() mkdir error");
+        return -1;
+    }
   
     strcpy(path, X_NAMED_PATH);
     strcat(path, display);
